# -*- coding: utf-8 -*-
"""Vic's Common Python Omnibus.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NupCke-gaxi3YbeJbmHorrgF4PLxzEc8
"""

#PLEASE CHECK README.MD!!!
#Created By Victor A. Bender
# DISCLAIMER: While all of this code is mine, most of it was written for Penn State's CMPSC131 Class, and follows the curriculum.

### Operations with Files:

def create_file(file_name): # Creates a file with name "file_name"
    f = open(file_name, "w")
    f.close()

def read_file(file_name): # Reads file "file_name" and returns contents in string format
    f = open(file_name, "r")
    contents = f.read()
    f.close()
    return contents

def read_file_lines(file_name): # Reads file and returns contents as a list, with each line being a new element
    f = open(file_name, "r")
    file_lines = f.readlines()
    f.close()
    return [line.replace('\n', '') for line in file_lines]

def write_to_file(file_name, lst): # Writes the contents of a list "lst" to "file_name"
    if len(lst) == 0:
        print("list is empty")
        return
    f = open(file_name, "w")
    for item in lst:
        f.write(item + '\n')
    f.close()

def append_to_file(file_name, lst): # Appends the contents of a list "lst" to "file_name"
    if len(lst) == 0:
        print("list is empty")
        return
    f = open(file_name, "a")
    for item in lst:
        f.write(item + '\n')
    f.close()

def file_word_replace(file_name, wrong_word, correct_word): # Replaces all instances of a "wrong_word" with "correct_word" and makes a new file with the corrected words
  read_file = open(file_name, "r")
  lines = read_file.readlines()
  read_file.close

  write_file = open("new_" + file_name, "w")
  for i in range(len(lines)):
    line = lines[i]
    line = line.replace(wrong_word, correct_word)
    write_file.write(line)
  write_file.close()

def file_to_list(file_name): # Converts a file to a list and returns said list
  f = open(file_name, "r")
  file_lines = f.readlines()
  f.close()

  return [line.replace('\n', '') for line in file_lines]

def list_to_file(inputs, new_file_name): # Converts a list to a file with name "file_name"
  f = open(new_file_name, "w")
  f.close()

  for i in range(len(inputs)):
    f = open(new_file_name, "w")
    for item in inputs:
      f.write(item + '\n')
    f.close()

### Operations With Lists:

def reverse_lst(inputs): # Takes a list and reverses the elements, and returns the reversed list
  outputs = []
  for i in range(len(inputs)):
    outputs += [0]
  for i in range(len(inputs)):
    outputs[len(inputs)-i-1] = inputs[i]

  return outputs

def index_in_list(lst, x): # Finds the index at which a certain element "x" occurs in a list, returns -1 if x is not in list

  for i in range(len(lst)):
    if lst[i] == x:
      return i

  return -1

def find_min(inputs): # Finds the minimum value in a list, and returns the min and the index at which it occurs
  if len(inputs) == 0:
    return -1

  min = inputs[0]
  min_index = 0

  for i in range(len(inputs)):
    if inputs[i] < min:
      min = inputs[i]
      min_index = i
  outputs = [min, min_index]

  return outputs

def find_max(inputs): # Finds the maximum value in a list, and returns the max and the index at which it occurs
  if len(inputs) == 0:
    return -1

  max = inputs[0]
  max_index = 0

  for i in range(len(inputs)):
    if inputs[i] > max:
      max = inputs[i]
      max_index = i
  outputs = [max, max_index]

  return outputs

### Operations with Logical Operators

def greatest_integer(a,b,c): # Finds and returns the greatest integer of 3 values
  largest = a
  smallest = b

  if b > a:
    largest = b
  elif c > b:
    largest = c

  if  a < b:
    smallest = a
  elif c < b:
    smallest = c

  print(largest, smallest)

def range_roller(N,K): # Takes in two parameters N and K, both as integers. Prints a list of numbers from N to 2N+1 (maximum must not be greater than 2N+1) with step size=3, if and only if K=0, Prints a list of numbers from N to 0 (minimum must not be lesser than 0) with step size=2, if and only if K=1, Prints -1 if K is neither 0 nor 1

  if K == 0:
        i = N
        while i <= 2*N + 1:
            print(i, end = ' ')
            i += 3
  elif K == 1:
      i = N
      while i >= 0:
          print(i, end = ' ')
          i -= 2
  else:
      return -1

def num_sum(N): # Takes in an integer N as a parameter and computes the sum of digits of N using a while loop.
    sum = 0
    while N > 0:
        sum += N % 10
        N = N // 10
    return sum


def main():
  ### You can write tests for all functions in here: I'm leaving this blank for now


  pass

if __name__ == '__main__':
    main()